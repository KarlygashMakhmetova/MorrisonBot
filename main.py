import telebot
from telebot import types
from coin_rewards import rewards
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import json
import os

bot = telebot.TeleBot('7252441687:AAG_NXXHUAD7SsObvvrd3_-JShZEhld3X2c')


STUDENTS_FILE = 'students.json'
TEACHERS_FILE = 'teachers.json'
SHOP_FILE = 'shop_data.json'

session = {}
students = {}
teachers = {}
add_teacher_sessions = {}

remove_coins_sessions = {}

ADMIN_IDS = [827084249, 831628355]
def is_admin(user_id):
    return user_id in ADMIN_IDS
def is_teacher(user_id):
    return str(user_id) in teachers
def is_student(user_id):
    return str(user_id) in students
def load_teachers():
    global teachers
    if os.path.exists(TEACHERS_FILE):
        with open(TEACHERS_FILE, 'r', encoding='utf-8') as f:
            teachers = json.load(f)
    else:
        teachers = {}
def save_teachers():
    with open(TEACHERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(teachers, f, ensure_ascii=False, indent=4)
def load_students():
    global students
    if os.path.exists(STUDENTS_FILE):
        with open(STUDENTS_FILE, 'r', encoding='utf-8') as f:
            students = json.load(f)
    else:
        students = {}
def save_students():
    with open(STUDENTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(students, f, ensure_ascii=False, indent=4)
def load_shop_data():
    try:
        with open(SHOP_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}
def save_shop_data(data=None):
    if data is None:
        data = shop_data
    with open("shop_data.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
def add_student(user_id, name, username=None):
    user_id = str(user_id)
    if user_id not in students:
        students[user_id] = {
            "name": name,
            "coins": 0,
            "transactions": []
        }
        if username:
            students[user_id]["username"] = username
        save_students()
def add_coins(user_id, amount, reason="", teacher_name=""):
    user_id = str(user_id)
    if user_id in students:
        students[user_id]['coins'] += amount
        students[user_id].setdefault("transactions", [])
        students[user_id]["transactions"].append({
            "type": "reward",
            "amount": amount,
            "reason": reason,
            "teacher": teacher_name
        })
        save_students()
def remove_coins(user_id, amount, reason="", teacher_name=""):
    user_id = str(user_id)
    if user_id in students and students[user_id]['coins'] >= amount:
        students[user_id]['coins'] -= amount
        students[user_id].setdefault("transactions", [])
        students[user_id]["transactions"].append({
            "type": "withdrawal",
            "amount": amount,
            "reason": reason,
            "teacher": teacher_name
        })
        save_students()
        return True
    return False
def get_coins(user_id):
    return students.get(str(user_id), {}).get('coins', 0)
def find_students_by_name(name_query):
    name_query = name_query.lower()
    return [(uid, data['name']) for uid, data in students.items() if name_query in data['name'].lower()]
def get_main_shop_inline():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(text=cat, callback_data=f"shop_{cat}") for cat in shop_data.keys()]
    keyboard.add(*buttons)
    return keyboard
def get_category_items(category):
    items = shop_data.get(category, [])
    text = f"üõç <b>{category}</b>\n\n"
    for i, (name, price, desc) in enumerate(items, 1):
        text += f"{i}. <b>{name}</b> - {price} ü™ô\n{desc}\n\n"
    return text.strip()
def get_items_keyboard(category):
    keyboard = InlineKeyboardMarkup(row_width=3)
    items = shop_data.get(category, [])
    buttons = [
        InlineKeyboardButton(
            text=str(i + 1),
            callback_data=f"buy_{category}_{i}"
        )
        for i in range(len(items))
    ]
    keyboard.add(*buttons)
    return keyboard

load_teachers()
load_students()
shop_data = load_shop_data()

new_users = {}
add_student_sessions = {}

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    username = message.from_user.username or f"id{user_id}"
    name = message.from_user.first_name

    if not is_student(user_id) and not is_teacher(user_id) and not is_admin(user_id):
        new_users[username] = {"user_id": user_id, "name": name}
        bot.send_message(user_id, "–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç.")
        wait_sticker = open('wait.webp', 'rb')
        bot.send_sticker(user_id, wait_sticker)
        return

    welcome = f"–ü—Ä–∏–≤–µ—Ç, {name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–µ—Ç–æ–∫!"
    if is_teacher(user_id):
        welcome += "\nüë©‚Äçüè´ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–º–∏ /info"
    elif is_student(user_id):
        welcome += "\nüßí –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–º–∏ /info"
    elif is_admin(user_id):
        welcome += "\n–¢—ã - –∞–¥–º–∏–Ω!üî• \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–º–∏ /info"

    bot.send_message(user_id, welcome)

@bot.message_handler(commands=['addteacher'])
def add_teacher_command(message):
    if not is_admin(message.chat.id):
        return bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username —É—á–∏—Ç–µ–ª—è (–±–µ–∑ @):")
    bot.register_next_step_handler(message, process_teacher_username)
def process_teacher_username(message):
    username = message.text.strip().lstrip('@')
    found_user = new_users.get(username)

    if not found_user:
        return bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞–∂–∞–ª /start. "
                                                 "\n–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /addteacher.")

    add_teacher_sessions[message.chat.id] = {"username": username}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∏—Ç–µ–ª—è (–∫–∞–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è):")
    bot.register_next_step_handler(message, process_teacher_name)
def process_teacher_name(message):
    admin_id = message.chat.id
    session_data = add_teacher_sessions.get(admin_id)
    if not session_data:
        return bot.send_message(admin_id, "‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /addteacher.")

    name = message.text.strip()
    username = session_data['username']
    user_data = new_users.get(username)

    if not user_data:
        return bot.send_message(admin_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    user_id = str(user_data['user_id'])
    teachers[user_id] = name
    save_teachers()

    bot.send_message(admin_id, f"‚úÖ –£—á–∏—Ç–µ–ª—å {name} (@{username}) –¥–æ–±–∞–≤–ª–µ–Ω!")
    bot.send_message(user_data['user_id'], "üéì –í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

    del add_teacher_sessions[admin_id]
    del new_users[username]

@bot.message_handler(commands=['removeteacher'])
def remove_teacher(message):
    if not is_admin(message.chat.id):
        return bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    if not teachers:
        return bot.send_message(message.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π –ø—É—Å—Ç.")

    keyboard = types.InlineKeyboardMarkup()
    for uid, name in teachers.items():
        keyboard.add(types.InlineKeyboardButton(f"{name} (ID: {uid})", callback_data=f"delteacher_{uid}"))

    bot.send_message(message.chat.id, "ü•∫–í—ã–±–µ—Ä–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delteacher_"))
def delete_teacher(call):
    if not is_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")

    teacher_id = call.data.split('_')[1]
    if teacher_id in teachers:
        teacher_name = teachers[teacher_id]
        del teachers[teacher_id]
        save_teachers()
        bot.send_message(call.message.chat.id, f"‚úÖ –£—á–∏—Ç–µ–ª—å {teacher_name} (ID: {teacher_id}) —É–¥–∞–ª—ë–Ω.")
    else:
        bot.send_message(call.message.chat.id, "‚ùå –£—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.message_handler(commands=['info'])
def info(message):
    user_id = message.chat.id

    if is_teacher(user_id):
        buttons = [
            KeyboardButton('/addstudent'),
            KeyboardButton('/addcoins'),
            KeyboardButton('/add_custom_coins'),
            KeyboardButton('/transactions'),
            KeyboardButton('/removecoins')
        ]
    elif is_admin(user_id):
        buttons = [
            KeyboardButton('/addteacher'),
            KeyboardButton('/removeteacher'),
            KeyboardButton('/addstudent'),
            KeyboardButton('/addcoins'),
            KeyboardButton('/add_custom_coins'),
            KeyboardButton('/removecoins'),
            KeyboardButton('/transactions'),
            KeyboardButton('/shop_edit'),
            KeyboardButton('/shop_remove'),
            KeyboardButton('/shop_add'),
            KeyboardButton('/tasks_add'),
            KeyboardButton('/tasks_remove'),
            KeyboardButton('/tasks_edit')
        ]
    else:
        welcome_txt = ("–ü—Ä–∏–≤–µ—Ç! üëã –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏ ü™ô –∑–∞ —Ö–æ—Ä–æ—à–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —É—Å–ø–µ—Ö–∏ –≤ —É—á–µ–±–µ."
                       "\n\n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:"
                       "\n\nüõçÔ∏è <b>–ú–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥</b>"
                       "\n–¢—ã –º–æ–∂–µ—à—å —Ç—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–∏ –º–æ–Ω–µ—Ç–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–∑—ã –∏ –ø–æ–æ—â—Ä–µ–Ω–∏—è! –ü—Ä–æ—Å—Ç–æ –Ω–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /shop, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã."
                       "\n\nüíº <b>–ë–∞–ª–∞–Ω—Å</b>"
                       "\n–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –º–æ–Ω–µ—Ç? –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /balance, –∏ —è –ø–æ–∫–∞–∂—É —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç."
                       "\n\nü™ô <b>–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏ ?</b> "
                       "\n–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –≤–∞—à –ö—É—Ä–∞—Ç–æ—Ä –∑–∞—á–∏—Å–ª–∏—Ç –º–æ–Ω–µ—Ç–∫–∏ –Ω–∞ —Å—á–µ—Ç")
        bot.send_message(user_id, welcome_txt, parse_mode='HTML')
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(*buttons)

    bot.send_message(user_id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=markup)

@bot.message_handler(commands=['profile'])
def profile(message):
    user_id = message.chat.id
    if is_student(user_id):
        coins = get_coins(user_id)
        bot.send_message(user_id, f"üßæ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ú–æ–Ω–µ—Ç–æ–∫: {coins}")
    else:
        bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


@bot.message_handler(commands=['top'])
def top(message):
    sorted_students = sorted(students.items(), key=lambda x: x[1]['coins'], reverse=True)
    rating = "üèÜ –¢–û–ü –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç:\n"
    for i, (uid, info) in enumerate(sorted_students, 1):
        rating += f"{i}. {info['name']} ‚Äî {info['coins']} –º–æ–Ω–µ—Ç–æ–∫\n"
    bot.send_message(message.chat.id, rating)

# ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /addstudent
@bot.message_handler(commands=['addstudent'])
def handle_add_student(message):
    if not (is_teacher(message.chat.id) or is_admin(message.chat.id)):
        return bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ username —É—á–µ–Ω–∏–∫–∞ (–±–µ–∑ @):")
    bot.register_next_step_handler(message, process_username)
def process_username(message):
    username = message.text.strip().lstrip('@')
    if username not in new_users:
        return bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞–∂–∞–ª /start."
                                                 "\n–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /addstudent.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É—á–∏—Ç–µ–ª—è
    add_student_sessions[message.chat.id] = {'username': username}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞ (–∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å):")
    bot.register_next_step_handler(message, process_student_name)
def process_student_name(message):
    teacher_id = message.chat.id
    if teacher_id not in add_student_sessions:
        return bot.send_message(teacher_id, "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π /addstudent.")

    name = message.text.strip()
    username = add_student_sessions[teacher_id]['username']
    user_data = new_users.get(username)
    if not user_data:
        return bot.send_message(teacher_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. \n/addstudent")

    user_id = str(user_data['user_id'])
    add_student(user_id, name)  # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞ —Å –∏–º–µ–Ω–µ–º –æ—Ç —É—á–∏—Ç–µ–ª—è
    bot.send_message(teacher_id, f"‚úÖ –£—á–µ–Ω–∏–∫ {name} (@{username}) –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?/info")
    bot.send_message(user_data['user_id'],
                     "üéâ –í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")

    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Å—Å–∏–π
    del add_student_sessions[teacher_id]
    del new_users[username]

@bot.message_handler(commands=['addcoins'])
def addcoins_cmd(message):
    if not (is_teacher(message.chat.id) or is_admin(message.chat.id)):
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
    bot.register_next_step_handler(message, search_student)
def search_student(message):
    results = find_students_by_name(message.text)
    if not results:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_info"))
        return bot.send_message(message.chat.id, "‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
    keyboard = types.InlineKeyboardMarkup()
    for uid, name in results:
        keyboard.add(types.InlineKeyboardButton(name, callback_data=f'select_{uid}'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda c: c.data.startswith('select_'))
def select_student(call):
    teacher_id = call.message.chat.id
    student_id = call.data.split('_')[1]
    session[teacher_id] = student_id

    keyboard = types.InlineKeyboardMarkup()
    for k, r in rewards.items():
        keyboard.add(types.InlineKeyboardButton(f"{k}. {r['text']} - {r['coins']}ü™ô", callback_data=f"reward_{k}"))
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_info"))

    bot.send_message(teacher_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda c: c.data.startswith('reward_'))
def give_reward(call):
    teacher_id = call.message.chat.id
    if teacher_id not in session:
        return bot.send_message(teacher_id, "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞.")

    reason_id = call.data.split('_')[1]
    reward = rewards[reason_id]
    student_id = session[teacher_id]

    add_coins(student_id, reward['coins'], reward['text'], teachers.get(str(teacher_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å"))
    bot.send_message(teacher_id, f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {reward['coins']}ü™ô ‚Äî {students[student_id]['name']}")
    bot.send_message(int(student_id), f"üéâ –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reward['coins']} –º–æ–Ω–µ—Ç(—ã) –∑–∞: {reward['text']}")

@bot.message_handler(commands=['add_custom_coins'])
def add_custom_coins_command(message):
    if not (is_teacher(message.from_user.id) or is_admin(message.from_user.id)):
        return bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    msg = bot.send_message(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
    bot.register_next_step_handler(msg, search_student_by_name)
def search_student_by_name(message):
    search_name = message.text.lower()
    matches = {sid: data for sid, data in students.items() if search_name in data['name'].lower()}

    if not matches:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return bot.register_next_step_handler(msg, search_student_by_name)

    markup = types.InlineKeyboardMarkup()
    for student_id, student in matches.items():
        markup.add(types.InlineKeyboardButton(
            text=f"{student['name']} ({student['coins']} –º–æ–Ω–µ—Ç)",
            callback_data=f"addcustomcoins_{student_id}"
        ))

    bot.send_message(message.chat.id, "üë§ –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É—á–µ–Ω–∏–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("addcustomcoins_"))
def handle_add_custom_coins_callback(call):
    student_id = call.data.split("_")[1]
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç:")
    bot.register_next_step_handler(msg, process_custom_coin_amount, student_id)
def process_custom_coin_amount(message, student_id):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
        msg = bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_custom_coin_reason, student_id, amount)
    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        bot.register_next_step_handler(msg, process_custom_coin_amount, student_id)
def process_custom_coin_reason(message, student_id, amount):
    reason = message.text
    teacher_id = message.from_user.id
    teacher_name = teachers.get(str(teacher_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å")

    add_coins(student_id, amount, reason, teacher_name)

    student_name = students[student_id]['name']
    bot.send_message(message.chat.id, f"‚úÖ {amount} –º–æ–Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ —É—á–µ–Ω–∏–∫—É {student_name}.\nüìÑ –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    bot.send_message(int(student_id), f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç(—ã) –∑–∞: {reason}")


@bot.message_handler(commands=['shop'])
def open_shop(message):
    if not is_student(message.chat.id) and not is_teacher(message.chat.id) and not is_admin(message.chat.id):
        return bot.send_message(message.chat.id, "‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    global shop_data
    shop_data = load_shop_data()

    bot.send_message(message.chat.id, "üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_shop_inline())

@bot.callback_query_handler(func=lambda call: call.data.startswith("shop_"))
def handle_shop_category(call):
    global shop_data
    shop_data = load_shop_data()

    category = call.data[5:]
    if category in shop_data:
        items_text = get_category_items(category)
        keyboard = get_items_keyboard(category)
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, items_text, parse_mode="HTML", reply_markup=keyboard)
    else:
        bot.answer_callback_query(call.id, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def handle_buy_item(call):
    global students
    global shop_data

    shop_data = load_shop_data()
    load_students()

    parts = call.data.split("_")
    category = "_".join(parts[1:-1])
    item_index = int(parts[-1])
    user_id = str(call.from_user.id)

    if user_id not in students:
        bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    items = shop_data.get(category, [])
    if 0 <= item_index < len(items):
        item_name, price, desc = items[item_index]
        user_data = students[user_id]
        user_coins = user_data.get("coins", 0)

        if user_coins >= price:
            students[user_id]["coins"] -= price
            students[user_id].setdefault("transactions", []).append({
                "type": "purchase",
                "item": item_name,
                "price": price,
                "category": category
            })
            students[user_id].setdefault("purchases", []).append(item_name)

            save_students()

            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ <b>{item_name}</b> –∑–∞ {price} ü™ô!\n\n{desc}",
                parse_mode="HTML"
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä–∞—Ç–æ—Ä–∞–º
            buyer_name = students[user_id]["name"]
            username = call.from_user.username

            if username:
                user_display = f"{buyer_name} - @{username}"
            else:
                user_display = f"{buyer_name} (id: {user_id})"

            notification_text = (
                f"üì¢ –£—á–µ–Ω–∏–∫ {user_display} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä: <b>{item_name}</b> –∑–∞ {price} ü™ô."
            )

            for teacher_id in teachers:
                try:
                    bot.send_message(int(teacher_id), notification_text, parse_mode="HTML")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—á–∏—Ç–µ–ª—é {teacher_id}: {e}")

            for admin_id in ADMIN_IDS:
                try:
                    bot.send_message(int(admin_id), notification_text, parse_mode="HTML")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        else:
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –£ –≤–∞—Å: {user_coins} ü™ô, –Ω—É–∂–Ω–æ: {price} ü™ô.",
                parse_mode="HTML"
            )
    else:
        bot.answer_callback_query(call.id, text="–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.message_handler(commands=['transactions'])
def handle_transactions(message):
    if not (is_teacher(message.from_user.id) or is_admin(message.from_user.id)):
        return bot.send_message(message.chat.id, "‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π.")

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
    bot.register_next_step_handler(message, transaction_search_student)
def transaction_search_student(message):
    results = find_students_by_name(message.text)
    if not results:
        return bot.send_message(message.chat.id, "‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    keyboard = types.InlineKeyboardMarkup()
    for uid, name in results:
        keyboard.add(types.InlineKeyboardButton(name, callback_data=f"transact_{uid}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda c: c.data.startswith("transact_"))
def show_transactions(call):
    student_id = call.data.split("_")[1]
    if student_id not in students:
        return bot.answer_callback_query(call.id, "–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    student = students[student_id]
    transactions = student.get('transactions', [])

    if not transactions:
        text = f"üìí –£ —É—á–µ–Ω–∏–∫–∞ {student['name']} –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π."
    else:
        text = f"üìí –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —É—á–µ–Ω–∏–∫–∞ {student['name']}:\n\n"
        for t in reversed(transactions[-10:]):  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10, –Ω–æ –æ—Ç –Ω–æ–≤–æ–π –∫ —Å—Ç–∞—Ä–æ–π
            t_type = t.get("type")
            if t_type == "reward":
                text += f"‚ûï –ù–∞—á–∏—Å–ª–µ–Ω–æ: +{t['amount']} ü™ô –∑–∞ {t.get('reason', '')} (—É—á–∏—Ç–µ–ª—å: {t.get('teacher', '')})\n"
            elif t_type == "purchase":
                text += f"üõí –ü–æ–∫—É–ø–∫–∞: {t.get('item', '')} –∑–∞ {t.get('price', 0)} ü™ô (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {t.get('category', '')})\n"
            elif t_type == "withdrawal" or t_type == "removal":
                text += f"‚ûñ –ò–∑—ä—è—Ç–æ: {t['amount']} ü™ô –∑–∞ {t.get('reason', '')} (—É—á–∏—Ç–µ–ª—å: {t.get('teacher', '')})\n"
            else:
                text += f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: {t}\n"

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_info"))

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['removecoins'])
def removecoins_cmd(message):
    if not (is_teacher(message.from_user.id) or is_admin(message.from_user.id)):
        return bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑—ä—è—Ç—å –º–æ–Ω–µ—Ç–∫–∏:")
    bot.register_next_step_handler(message, removecoins_search_student)
def removecoins_search_student(message):
    results = find_students_by_name(message.text)
    if not results:
        return bot.send_message(message.chat.id, "‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    keyboard = types.InlineKeyboardMarkup()
    for uid, name in results:
        keyboard.add(types.InlineKeyboardButton(name, callback_data=f'remove_select_{uid}'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∏–∑—ä—è—Ç–∏—è –º–æ–Ω–µ—Ç:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda c: c.data.startswith('remove_select_'))
def remove_select_student(call):
    teacher_id = call.message.chat.id
    student_id = call.data.split('_')[-1]
    remove_coins_sessions[teacher_id] = {'student_id': student_id}
    bot.answer_callback_query(call.id)
    bot.send_message(teacher_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑—ä—è—Ç—å:")
    bot.register_next_step_handler_by_chat_id(teacher_id, removecoins_input_amount)
def removecoins_input_amount(message):
    teacher_id = message.chat.id
    if teacher_id not in remove_coins_sessions:
        return bot.send_message(teacher_id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /removecoins.")

    try:
        amount = int(message.text.strip())
        if amount <= 0:
            raise ValueError
    except ValueError:
        return bot.send_message(teacher_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

    remove_coins_sessions[teacher_id]['amount'] = amount
    bot.send_message(teacher_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑—ä—è—Ç–∏—è –º–æ–Ω–µ—Ç:")
    bot.register_next_step_handler_by_chat_id(teacher_id, removecoins_input_reason)
def removecoins_input_reason(message):
    teacher_id = message.chat.id
    if teacher_id not in remove_coins_sessions:
        return bot.send_message(teacher_id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /removecoins.")

    reason = message.text.strip()
    session_data = remove_coins_sessions[teacher_id]
    student_id = session_data['student_id']
    amount = session_data['amount']

    if student_id not in students:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_info"))
        bot.send_message(teacher_id, "‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
        remove_coins_sessions.pop(teacher_id, None)
        return

    current_coins = students[student_id]['coins']
    if amount > current_coins:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_info"))
        bot.send_message(teacher_id, f"‚ùå –£ —É—á–µ–Ω–∏–∫–∞ –≤—Å–µ–≥–æ {current_coins} –º–æ–Ω–µ—Ç, –∏–∑—ä—è—Ç—å {amount} –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", reply_markup=keyboard)
        remove_coins_sessions.pop(teacher_id, None)
        return

    # –£–º–µ–Ω—å—à–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    students[student_id]['coins'] -= amount
    students[student_id].setdefault('transactions', [])
    students[student_id]['transactions'].append({
        "type": "removal",
        "amount": -amount,
        "reason": reason,
        "teacher": teachers.get(str(teacher_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å")
    })
    save_students()
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_info"))
    keyboard.add(types.InlineKeyboardButton("üìú –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data=f"transact_{student_id}"))

    bot.send_message(teacher_id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑—ä—è—Ç–æ {amount}ü™ô —É {students[student_id]['name']}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=keyboard)
    bot.send_message(int(student_id), f"‚ö†Ô∏è –£ –≤–∞—Å –∏–∑—ä—è–ª–∏ {amount} –º–æ–Ω–µ—Ç.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=keyboard)

    # –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
    remove_coins_sessions.pop(teacher_id, None)

@bot.callback_query_handler(func=lambda c: c.data == "back_to_info")
def back_to_info(call):
    bot.answer_callback_query(call.id)
    info(call.message)  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é info –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º

@bot.message_handler(func=lambda message: is_student(message.chat.id))
def restrict_student_text(message):
    # –ù–µ —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith("/"):
        return

    # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@bot.message_handler(commands=['shop_edit'])
def manage_shop_edit(message):
    if not is_admin(message.chat.id):
        return
    global shop_data
    shop_data = load_shop_data()

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for category in shop_data.keys():
        markup.add(KeyboardButton(category))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_edit_category)
def process_edit_category(message):
    category = message.text.strip()

    if category not in shop_data:
        bot.send_message(message.chat.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:")
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        for cat in shop_data.keys():
            markup.add(KeyboardButton(cat))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, process_edit_category)
        return

    items = shop_data[category]
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\":\n\n"
    for idx, (name, price, desc) in enumerate(items, 1):
        text += f"{idx}. {name} ‚Äî {price} –∫–æ–∏–Ω–æ–≤\n   {desc}\n"
    bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(message, lambda m: process_edit_item_index(m, category))
def process_edit_item_index(message, category):
    try:
        index = int(message.text.strip()) - 1
        if index < 0 or index >= len(shop_data[category]):
            raise IndexError
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        items = shop_data[category]
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\":\n\n"
        for idx, (name, price, desc) in enumerate(items, 1):
            text += f"{idx}. {name} ‚Äî {price} –∫–æ–∏–Ω–æ–≤\n   {desc}\n"
        bot.send_message(message.chat.id, text)
        bot.register_next_step_handler(message, lambda m: process_edit_item_index(m, category))
        return

    bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n–í–≤–µ–¥–∏—Ç–µ:\n1 ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ\n2 ‚Äî –¶–µ–Ω—É\n3 ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ")
    bot.register_next_step_handler(message, lambda m: process_edit_field(m, category, index))
def process_edit_field(message, category, index):
    field = message.text.strip()
    if field not in ("1", "2", "3"):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ:\n1 ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ\n2 ‚Äî –¶–µ–Ω—É\n3 ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ")
        bot.register_next_step_handler(message, lambda m: process_edit_field(m, category, index))
        return

    field_map = {"1": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "2": "—Ü–µ–Ω–∞", "3": "–æ–ø–∏—Å–∞–Ω–∏–µ"}
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—É–Ω–∫—Ç–∞ - {field_map[field]}:")
    bot.register_next_step_handler(message, lambda m: apply_edit(m, category, index, int(field)))
def apply_edit(message, category, index, field):
    global shop_data
    new_value = message.text.strip()
    item = list(shop_data[category][index])

    if field == 1:  # –ù–∞–∑–≤–∞–Ω–∏–µ
        item[0] = new_value
    elif field == 2:  # –¶–µ–Ω–∞
        if not new_value.isdigit():
            bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –û—Ç–º–µ–Ω–∞.")
            return
        item[1] = int(new_value)
    elif field == 3:  # –û–ø–∏—Å–∞–Ω–∏–µ
        item[2] = new_value

    shop_data[category][index] = item
    save_shop_data(shop_data)  # –ø–µ—Ä–µ–¥–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    bot.send_message(
        message.chat.id,
        f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {item[0]}\n–¶–µ–Ω–∞: {item[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {item[2]}"
    )


@bot.message_handler(commands=['shop_remove'])
def manage_shop_remove(message):
    if not is_admin(message.chat.id):
        return
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for category in shop_data.keys():
        markup.add(KeyboardButton(category))
    bot.send_message(message.chat.id, "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, process_remove_category)
def process_remove_category(message):
    category = message.text.strip()
    if category not in shop_data:
        bot.send_message(message.chat.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_remove_category)
        return

    items = shop_data[category]
    if not items:
        bot.send_message(message.chat.id, "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    text = f"üóë –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\":\n\n"
    for idx, (name, price, desc) in enumerate(items, 1):
        text += f"{idx}. {name} ‚Äî {price} –∫–æ–∏–Ω–æ–≤\n   {desc}\n"
    bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(message, lambda m: process_remove_item_index(m, category))
def process_remove_item_index(message, category):
    try:
        index = int(message.text.strip()) - 1
        if index < 0 or index >= len(shop_data[category]):
            raise IndexError
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, lambda m: process_remove_item_index(m, category))
        return

    item = shop_data[category].pop(index)
    save_shop_data()

    bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä \"{item[0]}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\".")

@bot.message_handler(commands=['manageshop_add'])
def manage_shop_add(message):
    if not is_admin(message.chat.id):
        return
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for category in shop_data.keys():
        markup.add(KeyboardButton(category))
    markup.add(KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"))
    bot.send_message(message.chat.id, "üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:", reply_markup=markup)
    bot.register_next_step_handler(message, process_add_category_choice)
def process_add_category_choice(message):
    category = message.text.strip()
    if category == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        bot.register_next_step_handler(message, process_new_category_name)
        return

    if category not in shop_data:
        bot.send_message(message.chat.id, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_add_category_choice)
        return

    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category}\" –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<–Ω–∞–∑–≤–∞–Ω–∏–µ> - <—Ü–µ–Ω–∞> - <–æ–ø–∏—Å–∞–Ω–∏–µ>")
    bot.register_next_step_handler(message, process_add_item, category)
def process_new_category_name(message):
    new_category = message.text.strip()
    if new_category in shop_data:
        bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.")
        bot.register_next_step_handler(message, process_new_category_name)
        return

    shop_data[new_category] = []
    save_shop_data()
    bot.send_message(message.chat.id, f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è \"{new_category}\" —Å–æ–∑–¥–∞–Ω–∞.")
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{new_category}\" –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<–Ω–∞–∑–≤–∞–Ω–∏–µ> - <—Ü–µ–Ω–∞> - <–æ–ø–∏—Å–∞–Ω–∏–µ>")
    bot.register_next_step_handler(message, process_add_item, new_category)
def process_add_item(message, category):
    text = message.text.strip()
    parts = text.split(" - ")
    if len(parts) != 3:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<–Ω–∞–∑–≤–∞–Ω–∏–µ> - <—Ü–µ–Ω–∞> - <–æ–ø–∏—Å–∞–Ω–∏–µ>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_add_item, category)
        return

    name, price_str, desc = map(str.strip, parts)
    if not price_str.isdigit():
        bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_add_item, category)
        return

    price = int(price_str)
    shop_data[category].append([name, price, desc])
    save_shop_data()

    bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä \"{name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"{category}\" —Å —Ü–µ–Ω–æ–π {price} –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º:\n{desc}")

@bot.message_handler(commands=['tasks_add'])
def manage_tasks_add(message):
    if not is_admin(message.chat.id):
        return
    bot.send_message(message.chat.id,
                     "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–∑–∞–¥–∞–Ω–∏–µ - –∫–æ–∏–Ω—ã (—Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)")
    bot.register_next_step_handler(message, process_new_task)

def process_new_task(message):
    text = message.text.strip()
    if ' - ' not in text:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n–∑–∞–¥–∞–Ω–∏–µ - –∫–æ–∏–Ω—ã\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_new_task)
        return

    task_name, coins_str = map(str.strip, text.split(' - ', 1))
    if not coins_str.isdigit():
        bot.send_message(message.chat.id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_new_task)
        return

    coins = int(coins_str)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Ç–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –µ—â–µ –Ω–µ –±—ã–ª–æ
    for val in rewards.values():
        if isinstance(val, dict) and val.get('text') == task_name:
            bot.send_message(message.chat.id, "‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            bot.register_next_step_handler(message, process_new_task)
            return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á (—Å—Ç—Ä–æ–∫–æ–≤—ã–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä)
    existing_ids = [int(k) for k in rewards.keys() if k.isdigit()]
    new_id = str(max(existing_ids) + 1) if existing_ids else '1'

    rewards[new_id] = {'text': task_name, 'coins': coins}
    save_rewards()

    bot.send_message(message.chat.id, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ \"{task_name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å –Ω–∞–≥—Ä–∞–¥–æ–π {coins} –∫–æ–∏–Ω–æ–≤.")

def save_rewards():
    import json
    with open('coin_rewards.py', 'w', encoding='utf-8') as f:
        f.write("rewards = ")
        f.write(repr(rewards))


@bot.message_handler(commands=['tasks_edit'])
def manage_tasks_edit(message):
    if not is_admin(message.chat.id):
        return

    if not rewards:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    for key, val in rewards.items():
        text += f"{key}. {val['text']} ‚Äî {val['coins']} ü™ô\n"

    bot.send_message(message.chat.id, text + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    bot.register_next_step_handler(message, process_edit_task_choice)
def process_edit_task_choice(message):
    task_id = message.text.strip()

    if task_id not in rewards:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_edit_task_choice)
        return

    bot.send_message(
        message.chat.id,
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n–í–≤–µ–¥–∏—Ç–µ:\n1 ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ\n2 ‚Äî –ö–æ–∏–Ω—ã"
    )
    bot.register_next_step_handler(message, lambda m: process_edit_task_field(m, task_id))
def process_edit_task_field(message, task_id):
    field = message.text.strip()

    if field not in ("1", "2"):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ:\n1 ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ\n2 ‚Äî –ö–æ–∏–Ω—ã")
        bot.register_next_step_handler(message, lambda m: process_edit_task_field(m, task_id))
        return

    field_map = {"1": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "2": "–∫–æ–∏–Ω—ã"}
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ‚Äî {field_map[field]}:")
    bot.register_next_step_handler(message, lambda m: apply_task_edit(m, task_id, int(field)))
def apply_task_edit(message, task_id, field):
    new_value = message.text.strip()

    if field == 1:
        rewards[task_id]['text'] = new_value
    elif field == 2:
        if not new_value.isdigit():
            bot.send_message(message.chat.id, "‚ùå –ö–æ–∏–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, lambda m: apply_task_edit(m, task_id, field))
            return
        rewards[task_id]['coins'] = int(new_value)

    save_rewards()

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n\n"
        f"–ó–∞–¥–∞–Ω–∏–µ: {rewards[task_id]['text']}\n"
        f"–ö–æ–∏–Ω—ã: {rewards[task_id]['coins']} ü™ô"
    )

@bot.message_handler(commands=['tasks_remove'])
def manage_tasks_remove(message):
    if not is_admin(message.chat.id):
        return

    if not rewards:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    text = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for key, val in rewards.items():
        if isinstance(val, dict) and 'text' in val and 'coins' in val:
            text += f"{key}. {val['text']} ‚Äî {val['coins']} ü™ô\n"
        else:
            # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
            continue

    bot.send_message(message.chat.id, text + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_remove_task_choice)
def process_remove_task_choice(message):
    task_id = message.text.strip()

    if task_id not in rewards or not isinstance(rewards[task_id], dict):
        bot.send_message(message.chat.id, "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_remove_task_choice)
        return

    removed_task = rewards.pop(task_id)
    save_rewards()

    bot.send_message(message.chat.id, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ \"{removed_task['text']}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")

bot.infinity_polling(none_stop=True)
